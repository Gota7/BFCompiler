//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BF.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class BFLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MV_RIGHT=1, MV_LEFT=2, INC=3, DEC=4, OUTPUT=5, INPUT=6, LOOP_CHECK=7, 
		LOOP_BOUNCE=8, OTHER=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"MV_RIGHT", "MV_LEFT", "INC", "DEC", "OUTPUT", "INPUT", "LOOP_CHECK", 
		"LOOP_BOUNCE", "OTHER", "NewLine", "Whitespace", "UnicodeClassZS"
	};


	public BFLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BFLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'>'", "'<'", "'+'", "'-'", "'.'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MV_RIGHT", "MV_LEFT", "INC", "DEC", "OUTPUT", "INPUT", "LOOP_CHECK", 
		"LOOP_BOUNCE", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BF.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BFLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\v', '=', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x6', '\n', '-', '\n', '\n', '\r', '\n', '\xE', '\n', '.', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x36', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', ':', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '.', '\x2', '\xE', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\x2', '\x17', '\x2', '\x19', '\x2', '\x3', 
		'\x2', '\x5', '\x6', '\x2', '\f', '\f', '\xF', '\xF', '\x87', '\x87', 
		'\x202A', '\x202B', '\x4', '\x2', '\v', '\v', '\r', '\xE', '\v', '\x2', 
		'\"', '\"', '\xA2', '\xA2', '\x1682', '\x1682', '\x1810', '\x1810', '\x2002', 
		'\x2008', '\x200A', '\x200C', '\x2031', '\x2031', '\x2061', '\x2061', 
		'\x3002', '\x3002', '\x2', '<', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\a', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\t', '!', '\x3', '\x2', '\x2', '\x2', '\v', '#', 
		'\x3', '\x2', '\x2', '\x2', '\r', '%', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x11', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x13', ',', '\x3', '\x2', '\x2', '\x2', '\x15', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x39', '\x3', '\x2', '\x2', '\x2', '\x19', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '@', '\x2', '\x2', '\x1C', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '>', '\x2', '\x2', 
		'\x1E', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '-', '\x2', 
		'\x2', ' ', '\b', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '/', '\x2', 
		'\x2', '\"', '\n', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x30', 
		'\x2', '\x2', '$', '\f', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '.', 
		'\x2', '\x2', '&', '\xE', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', 
		']', '\x2', '\x2', '(', '\x10', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\a', '_', '\x2', '\x2', '*', '\x12', '\x3', '\x2', '\x2', '\x2', '+', 
		'-', '\v', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\b', '\n', '\x2', '\x2', '\x31', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\xF', '\x2', '\x2', '\x33', 
		'\x36', '\a', '\f', '\x2', '\x2', '\x34', '\x36', '\t', '\x2', '\x2', 
		'\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x16', '\x3', '\x2', '\x2', '\x2', '\x37', 
		':', '\x5', '\x19', '\r', '\x2', '\x38', ':', '\t', '\x3', '\x2', '\x2', 
		'\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x18', '\x3', '\x2', '\x2', '\x2', ';', '<', '\t', 
		'\x4', '\x2', '\x2', '<', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x2', 
		'.', '\x35', '\x39', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
