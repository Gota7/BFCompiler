//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BF.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IBFListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class BFBaseListener : IBFListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="BFParser.init"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInit([NotNull] BFParser.InitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BFParser.init"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInit([NotNull] BFParser.InitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Do_Loop</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDo_Loop([NotNull] BFParser.Do_LoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Do_Loop</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDo_Loop([NotNull] BFParser.Do_LoopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Move_Right</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMove_Right([NotNull] BFParser.Move_RightContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Move_Right</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMove_Right([NotNull] BFParser.Move_RightContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Move_Left</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMove_Left([NotNull] BFParser.Move_LeftContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Move_Left</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMove_Left([NotNull] BFParser.Move_LeftContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIncrement([NotNull] BFParser.IncrementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIncrement([NotNull] BFParser.IncrementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecrement([NotNull] BFParser.DecrementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecrement([NotNull] BFParser.DecrementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Output</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOutput([NotNull] BFParser.OutputContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Output</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOutput([NotNull] BFParser.OutputContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Input</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInput([NotNull] BFParser.InputContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Input</c>
	/// labeled alternative in <see cref="BFParser.instruction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInput([NotNull] BFParser.InputContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BFParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLoop([NotNull] BFParser.LoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BFParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLoop([NotNull] BFParser.LoopContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
